{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","list","markers","addMarkers","daum","map","_this","forEach","v","maps","Marker","position","LatLng","y","x","setMap","findLatLng","element","load","services","Places","keywordSearch","res","setState","console","log","customRender","_callee","regenerator_default","a","wrap","_context","prev","next","Object","assertThisInitialized","length","Map","center","level","stop","react_default","createElement","className","style","width","height","index_es","apiKey","mapId","render","this","Button_default","variant","color","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAgFeA,6MAvEbC,MAAQ,CACNC,KAAM,GACNC,QAAS,MAGXC,WAAa,SAACC,EAAMC,GAClBC,EAAKN,MAAMC,KAAKM,QAAQ,SAAAC,GACP,IAAIJ,EAAKK,KAAKC,OAAO,CAClCC,SAAU,IAAIP,EAAKK,KAAKG,OAAOJ,EAAEK,EAAGL,EAAEM,KAGjCC,OAAOV,QAOlBW,WAAa,SAACC,EAASb,GACrBA,EAAKK,KAAKS,KAAK,YACE,IAAId,EAAKK,KAAKU,SAASC,QAC/BC,cAAc,oCAAY,SAACC,GAChChB,EAAKiB,SAAS,CACZtB,KAAOqB,IAETE,QAAQC,IAAIH,GAEZhB,EAAKoB,aAAaT,EAASb,UAMjCsB,mDAAe,SAAAC,EAAOV,EAASb,GAAhB,OAAAwB,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACbT,QAAQC,IAAIR,EAASb,EAArB8B,OAAAC,EAAA,EAAAD,CAAA5B,IAGY,iBAAwB,iBACP,GAA1BA,EAAKN,MAAMC,KAAKmC,QACnBhC,EAAKK,KAAKS,KAAK,WACX,IAAMb,EAAM,IAAID,EAAKK,KAAK4B,IAAIpB,EAAS,CACnCqB,OAAQ,IAAIlC,EAAKK,KAAKG,OAAON,EAAKN,MAAMC,KAAK,GAAGY,EAAGP,EAAKN,MAAMC,KAAK,GAAGa,GACtEyB,MAAO,IAEI,IAAInC,EAAKK,KAAKC,OAAO,CAChCC,SAAU,IAAIP,EAAKK,KAAKG,OAAON,EAAKN,MAAMC,KAAK,GAAGY,EAAGP,EAAKN,MAAMC,KAAK,GAAGa,KAErEC,OAAOV,GAEdC,EAAKH,WAAWC,EAAMC,KAhBb,wBAAA0B,EAAAS,SAAAb,sIAqBb,OACEc,EAAAZ,EAAAa,cAAA,OAAKC,UAAU,OACbF,EAAAZ,EAAAa,cAAA,UAAQC,UAAU,cAChBF,EAAAZ,EAAAa,cAAA,OAAKE,MAAO,CAACC,MAAO,QAASC,OAAQ,UACnCL,EAAAZ,EAAAa,cAACK,EAAA,EAAD,CACEC,OAAO,mCACPC,MAAO,WACPC,OAAQC,KAAKnC,cAGjByB,EAAAZ,EAAAa,cAACU,EAAAvB,EAAD,CAAQwB,QAAQ,YAAYC,MAAM,WAAlC,wBAjEQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OAAOT,EAAAZ,EAAAa,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7365cf3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n// import { withStyles } from '@material-ui/core/styles'\r\n// import { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport DaumMap from 'daum-maps-react'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    list: [],\r\n    markers: []\r\n  }\r\n\r\n  addMarkers = (daum, map) =>{\r\n    this.state.list.forEach(v=>{\r\n      const marker = new daum.maps.Marker({\r\n        position: new daum.maps.LatLng(v.y, v.x)\r\n      })\r\n  \r\n      marker.setMap(map)\r\n      // this.setState({\r\n      //   markers: this.state.markers.push(marker)\r\n      // }) \r\n    })\r\n  }\r\n\r\n  findLatLng = (element, daum) =>{\r\n    daum.maps.load(()=>{\r\n      const places = new daum.maps.services.Places()\r\n      places.keywordSearch('효원로308번길', (res)=>{\r\n        this.setState({\r\n          list : res\r\n        })\r\n        console.log(res)\r\n\r\n        this.customRender(element, daum)\r\n        return\r\n      })\r\n    })\r\n  }\r\n\r\n  customRender = async (element, daum) => {\r\n    console.log(element, daum, this) // map element, daum api, Example Component\r\n    // this.findLatLng(element, daum)\r\n\r\n    const lat = 37.3955241655064, lng = 127.113420313007\r\n    if(this.state.list.length != 0)\r\n    daum.maps.load(() => {\r\n        const map = new daum.maps.Map(element, {\r\n            center: new daum.maps.LatLng(this.state.list[0].y, this.state.list[0].x),\r\n            level: 3\r\n        })\r\n        const marker = new daum.maps.Marker({\r\n            position: new daum.maps.LatLng(this.state.list[0].y, this.state.list[0].x)\r\n        })\r\n        marker.setMap(map)\r\n\r\n        this.addMarkers(daum, map)\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div style={{width: '500px', height: '500px'}}>\r\n            <DaumMap\r\n              apiKey='1e40426f3b6c5127cd7237c62fe56cee'\r\n              mapId={'daum-map'}\r\n              render={this.findLatLng}\r\n            />\r\n          </div>\r\n          <Button variant=\"contained\" color=\"primary\">Hello world</Button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}