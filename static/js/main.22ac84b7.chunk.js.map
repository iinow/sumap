{"version":3,"sources":["App.js","pages/Page.js","serviceWorker.js","index.js"],"names":["id","createData","name","calories","fat","carbs","protein","rows","Page","Component","state","data","Array","addData","map","Map","Data","forEach","d","undefined","get","addr","includes","set","push","res","v","k","_this","setState","console","log","componentDidMount","react_default","a","createElement","className","style","width","height","margin","Paper_default","this","props","root","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","row","key","component","scope","concat","num1","num2","num3","Boolean","window","location","hostname","match","ReactDOM","render","Page_Page","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVA0BIA,EAAK,EACT,SAASC,EAAWC,EAAMC,EAAUC,EAAKC,EAAOC,GAE9C,MAAO,CAAEN,GADTA,GAAM,EACOE,OAAMC,WAAUC,MAAKC,QAAOC,WAG3C,IAAMC,EAAO,CACXN,EAAW,iBAAkB,IAAK,EAAK,GAAI,GAC3CA,EAAW,qBAAsB,IAAK,EAAK,GAAI,KAC/CA,EAAW,SAAU,IAAK,GAAM,GAAI,GACpCA,EAAW,UAAW,IAAK,IAAK,GAAI,KACpCA,EAAW,cAAe,IAAK,GAAM,GAAI,MCzBtBO,GD2BHC,uNC1BdC,MAAQ,CACJC,KAAM,IAAIC,SAGdC,QAAU,WACN,IAAIC,EAAM,IAAIC,IAEdC,EAAKC,QAAQ,SAAAC,QACcC,GAAnBL,EAAIM,IAAIF,EAAEG,OACNH,EAAEG,KAAKC,SAHT,uBAIER,EAAIS,IAAIL,EAAEG,KAAM,SAEDF,GAAnBL,EAAIM,IAAIF,EAAEG,OACVP,EAAIM,IAAIF,EAAEG,MAAMG,KAAKN,KAG7B,IAAIO,EAAM,IAAIb,MAEdE,EAAIG,QAAQ,SAACS,EAAGC,GACZD,EAAET,QAAQ,SAAAC,GACNO,EAAID,KAAKN,OAIjBU,EAAKC,SAAS,CACVlB,KAAMc,IAEVK,QAAQC,IAAIN,MAGhBO,kBAAoB,WAChBJ,EAAKf,mFAIL,OACIoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,MAAO,SAAUC,OAAQ,QAASC,OAAQ,SACpDP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWM,KAAKC,MAAMC,MACzBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAOE,UAAWM,KAAKC,MAAMG,OACzBb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,KACID,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACID,EAAAC,EAAAC,cAACc,EAAAf,EAAD,qBACAD,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAWgB,MAAM,SAAjB,gBACAjB,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAWgB,MAAM,SAAjB,qCAMRjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,KAEQQ,KAAKhC,MAAMC,KAAKG,IAAI,SAAAsC,GAAG,OACnBnB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAUmB,IAAKD,EAAIpD,IACfiC,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAWoB,UAAU,KAAKC,MAAM,OAC3BH,EAAI/B,MAETY,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAWgB,MAAM,SAASE,EAAIlD,MAC9B+B,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAWgB,MAAM,SAAjB,GAAAM,OAA6BJ,EAAIK,KAAjC,KAAAD,OAAyCJ,EAAIM,KAA7C,KAAAF,OAAqDJ,EAAIO,sBA3DnElD,cCAdmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22ac84b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n// import { withStyles } from '@material-ui/core/styles'\r\n// import { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport DaumMap, { propTypes } from 'daum-maps-react'\r\nimport Data from './resources/suwon.json'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing.unit * 3,\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\nlet id = 0;\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  id += 1;\r\n  return { id, name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\nclass App extends Component {\r\n  state = {\r\n    list: [],\r\n    markers: [],\r\n    data: undefined\r\n  }\r\n\r\n  containData = (obj) => {\r\n    let spl = obj.place_name.split(' ')\r\n    console.log(spl)\r\n\r\n    let map = new Map()\r\n    map.forEach((k, v)=>{\r\n      \r\n    })\r\n    // this.state.data\r\n  }\r\n\r\n  addData = () => {\r\n    let map = new Map()\r\n    let str = '영통구'\r\n    Data.forEach(d => {\r\n      if (map.get(d.addr) == undefined) {\r\n        if(d.addr.includes(str))\r\n          map.set(d.addr, [])\r\n      }\r\n      if (map.get(d.addr) != undefined)\r\n        map.get(d.addr).push(d)\r\n    })\r\n\r\n    this.setState({\r\n      data: map\r\n    })\r\n\r\n    console.log(this.state.data)\r\n    // this.state.data.map(())\r\n  }\r\n\r\n  addMarkers = (daum, map) => {\r\n    this.state.list.forEach(v => {\r\n      this.containData(v)\r\n\r\n      const marker = new daum.maps.Marker({\r\n        position: new daum.maps.LatLng(v.y, v.x),\r\n        clickable: true\r\n      })\r\n\r\n      daum.maps.event.addListener(marker, 'click', () => {\r\n        new daum.maps.InfoWindow({\r\n          content: `<div style=\"padding:5px;color:black;font-size:60%\">${v.place_name}</div>`,\r\n          removable: true\r\n        }).open(map, marker)\r\n      })\r\n      marker.setMap(map)\r\n      // this.setState({\r\n      //   markers: this.state.markers.push(marker)\r\n      // }) \r\n    })\r\n  }\r\n\r\n  findLatLng = (element, daum) => {\r\n    this.addData()\r\n    daum.maps.load(() => {\r\n      const places = new daum.maps.services.Places()\r\n      places.keywordSearch('봉영로1517번길', (res) => {\r\n        this.setState({\r\n          list: res\r\n        })\r\n        console.log(res)\r\n\r\n        this.customRender(element, daum)\r\n        return\r\n      })\r\n    })\r\n  }\r\n\r\n  customRender = async (element, daum) => {\r\n    console.log(element, daum, this) // map element, daum api, Example Component\r\n\r\n    if (this.state.list.length != 0)\r\n      daum.maps.load(() => {\r\n        const map = new daum.maps.Map(element, {\r\n          center: new daum.maps.LatLng(this.state.list[0].y, this.state.list[0].x),\r\n          level: 3\r\n        })\r\n        const marker = new daum.maps.Marker({\r\n          position: new daum.maps.LatLng(this.state.list[0].y, this.state.list[0].x),\r\n          clickable: true\r\n        })\r\n\r\n        daum.maps.event.addListener(marker, 'click', () => {\r\n          new daum.maps.InfoWindow({\r\n            content: '<div style=\"padding:5px;color:black;\">Hello World!</div>',\r\n            removable: true\r\n          }).open(map, marker)\r\n        })\r\n\r\n        marker.setMap(map)\r\n\r\n        this.addMarkers(daum, map)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <span>\r\n            <div style={{ width: '1024px', height: '700px', margin: '50px' }}>\r\n              <DaumMap\r\n                apiKey='1e40426f3b6c5127cd7237c62fe56cee'\r\n                mapId={'daum-map'}\r\n                render={this.findLatLng}\r\n              />\r\n            </div>\r\n            <Paper className={this.props.root}>\r\n              <Table className={this.props.table}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>주소</TableCell>\r\n                    <TableCell align=\"right\">개수</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {\r\n                    this.state.data != undefined ? rows.map(row => (\r\n                      <TableRow key={row.id}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {row.name}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{row.calories}</TableCell>\r\n                      </TableRow>\r\n                    )) : ''\r\n                  }\r\n                </TableBody>\r\n              </Table>\r\n            </Paper>\r\n          </span>\r\n\r\n          {/* <Button variant=\"contained\" color=\"primary\">Hello world</Button> */}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Data from '../resources/suwon.json'\r\nimport '../App.css';\r\n\r\nexport default class Page extends Component {\r\n    state = {\r\n        data: new Array()\r\n    }\r\n\r\n    addData = () => {\r\n        let map = new Map()\r\n        let str = '영통구'\r\n        Data.forEach(d => {\r\n            if (map.get(d.addr) == undefined) {\r\n                if (d.addr.includes(str))\r\n                    map.set(d.addr, [])\r\n            }\r\n            if (map.get(d.addr) != undefined)\r\n                map.get(d.addr).push(d)\r\n        })\r\n        \r\n        let res = new Array()\r\n        // map.forEach((v, k))\r\n        map.forEach((v, k)=>{\r\n            v.forEach(d=>{\r\n                res.push(d)\r\n            })\r\n        })\r\n        \r\n        this.setState({\r\n            data: res\r\n        })\r\n        console.log(res)\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.addData()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div style={{ width: '1024px', height: '700px', margin: '50px' }}>\r\n                    <Paper className={this.props.root}>\r\n                        <Table className={this.props.table}>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>주소</TableCell>\r\n                                    <TableCell align=\"right\">이름</TableCell>\r\n                                    <TableCell align=\"right\">휴대폰 번호</TableCell>\r\n                                    {/* <TableCell align=\"right\">Fat (g)</TableCell>\r\n                    <TableCell align=\"right\">Carbs (g)</TableCell>\r\n                    <TableCell align=\"right\">Protein (g)</TableCell> */}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    this.state.data.map(row => (\r\n                                        <TableRow key={row.id}>\r\n                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                {row.addr}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                                            <TableCell align=\"right\">{`${row.num1}-${row.num2}-${row.num3}`}</TableCell>\r\n                                        </TableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Paper>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Page from './pages/Page'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Page />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}